{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["engine","Styletron","App","value","debug","debugAfterHydration","className","action","method","name","type","window","result","src","logo","alt","token","href","target","rel","color","size","rootElement","document","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Main","StrictMode","h","w","bg","hoverBg","rounded","m","r","shadow","hoverShadow"],"mappings":"oPAAe,MAA0B,0B,8BCoBnCA,EAAS,IAAIC,IAEnB,SAASC,IACP,OACI,cAAC,WAAD,CAAmBC,MAAOH,EAAQI,MAPE,UAOYC,qBAAmB,EAAnE,SACF,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,uBAAMC,OAAO,YAAYC,OAAO,OAAhC,UACE,yBAAQC,KAAK,iBAAb,UACE,sDACA,0DACA,qEACA,iEAEF,wBAAQA,KAAK,gBAAgBC,KAAK,SAAlC,4BAEF,oDAAuBC,OAAOC,UAC9B,qBAAKC,IAAKC,EAAMR,UAAU,WAAWS,IAAI,SACzC,sCACO,8CADP,0BAGA,4CAAeJ,OAAOK,SACtB,mBACEV,UAAU,WACVW,KAAK,uBACLC,OAAO,SACPC,IAAI,sBAJN,yBAQA,cAAC,OAAD,CAAMV,KAAK,MAAMW,MAAM,QAAQC,KAAK,gBAO5C,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,GAEVpB,QChDAyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCcR5B,EAAS,IAAIC,IA6BJ,SAASmC,IACtB,OACE,qCACE,cAAC,aAAD,IACA,cAAC,EAAD,OA/BNX,IAASC,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFd,SAASC,eAAe,SAG1BC,IAASC,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,WAAD,CAAmBlC,MAAOH,EAAQI,MAdI,UAcUC,qBAAmB,EAAnE,SACI,cAAC,SAAD,CACJiC,EAAE,SACFC,EAAE,SACFC,GAAG,aACHC,QAAQ,aACRC,QAAQ,SACRC,EAAG,CAAEC,EAAG,QACRC,OAAO,IACPC,YAAY,IARR,SASI,cAAC,OAAD,CAAMrC,KAAK,SAASY,KAAK,OAAOD,MAAM,gBAKhDG,SAASC,eAAe,UAgB1BG,M","file":"js/main.04bf008f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n  ThemeProvider,\r\n  DefaultTheme,\r\n  StyleReset,\r\n  Div,\r\n  Button,\r\n  Text,\r\n  Icon\r\n} from \"atomize\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\r\nimport { Client as Styletron } from \"styletron-engine-atomic\";\r\n\r\nconst debug =\r\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\r\n\r\n// 1. Create a client engine instance\r\nconst engine = new Styletron();\r\n\r\nfunction App() {\r\n  return (\r\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <form action=\"/example/\" method=\"post\">\r\n          <select name=\"exampleButtons\">\r\n            <option>0_modeling_goals</option>\r\n            <option>1_analysis_build_cgg</option>\r\n            <option>2_synthesis_realize_controllers</option>\r\n            <option>3_simulation_orchestrate</option>\r\n          </select>\r\n          <button name=\"submitExample\" type=\"submit\">Run Example</button>\r\n        </form>\r\n        <div>Example output : {window.result}</div>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p>My Token = {window.token}</p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <Icon name=\"Add\" color=\"black\" size=\"50px\" />\r\n      </header>\r\n    </div>\r\n      </StyletronProvider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { StyleReset } from 'atomize';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {\r\n  ThemeProvider,\r\n  DefaultTheme,\r\n  Div,\r\n  Button,\r\n  Text,\r\n  Icon\r\n} from \"atomize\";\r\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\r\nimport { Client as Styletron } from \"styletron-engine-atomic\";\r\n\r\nconst debug =\r\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\r\n\r\n// 1. Create a client engine instance\r\nconst engine = new Styletron();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine} debug={debug} debugAfterHydration>\r\n        <Button\r\n    h=\"2.5rem\"\r\n    w=\"2.5rem\"\r\n    bg=\"warning700\"\r\n    hoverBg=\"warning600\"\r\n    rounded=\"circle\"\r\n    m={{ r: \"1rem\" }}\r\n    shadow=\"2\"\r\n    hoverShadow=\"4\">\r\n            <Icon name=\"Search\" size=\"20px\" color=\"white\" /></Button>\r\n    </StyletronProvider>\r\n\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root1')\r\n);\r\n\r\nexport default function Main() {\r\n  return (\r\n    <>\r\n      <StyleReset />\r\n      <App />\r\n\r\n    </>\r\n  );\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}